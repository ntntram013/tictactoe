{"ast":null,"code":"var _jsxFileName = \"D:\\\\HK1_21_22\\\\Web\\\\week2\\\\src\\\\index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst oStr = 'OOOOO';\nconst xStr = 'XXXXX';\nconst numToWin = 5;\n\nfunction Square(props) {\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    className: \"square\",\n    onClick: props.onClick,\n    children: props.value\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 10,\n    columnNumber: 9\n  }, this);\n}\n\n_c = Square;\n\nclass Board extends React.Component {\n  renderSquare(i) {\n    return /*#__PURE__*/_jsxDEV(Square, {\n      value: this.props.squares[i],\n      onClick: () => this.props.onClick(i)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 13\n    }, this);\n  }\n\n  render() {\n    let htmlFull = [];\n\n    for (let i = 0; i < this.props.numRow; i++) {\n      let htmlRow = [];\n      let tempRow = [];\n\n      for (let j = 0; j < this.props.numCol; j++) {\n        tempRow.push(this.renderSquare(i * this.props.numCol + j));\n      }\n\n      htmlRow = /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"board-row\",\n        children: tempRow\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 23\n      }, this);\n      htmlFull.push(htmlRow);\n    }\n\n    return htmlFull;\n    /*(\r\n            <div>\r\n              <div className=\"board-row\">\r\n                {this.renderSquare(0)}\r\n                {this.renderSquare(1)}\r\n                {this.renderSquare(2)}\r\n            </div>\r\n            <div className=\"board-row\">\r\n                {this.renderSquare(3)}\r\n                {this.renderSquare(4)}\r\n                {this.renderSquare(5)}\r\n            </div>\r\n            <div className=\"board-row\">\r\n                {this.renderSquare(6)}\r\n                {this.renderSquare(7)}\r\n                {this.renderSquare(8)}\r\n            </div>\r\n        </div>\r\n    );\r\n       */\n  }\n\n}\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      history: [{\n        squares: Array(9).fill(null)\n      }],\n      stepNumber: 0,\n      xIsNext: true,\n      movePosition: [],\n      currentHistory: 0,\n      numCol: 7,\n      numRow: 10,\n      isDescending: false,\n      isEnd: false\n    };\n  }\n\n  handleClick(i) {\n    const history = this.state.history;\n    const movePosition = this.state.movePosition;\n    const current = history[history.length - 1];\n    const squares = current.squares.slice();\n    const currentPosition = this.state.movePosition[this.state.stepNumber - 1];\n    const col = this.state.numCol;\n    const row = this.state.numRow;\n\n    if (calculateWinner(current.squares, currentPosition, col, row, this.state.xIsNext) || squares[i]) {\n      return;\n    }\n\n    squares[i] = this.state.xIsNext ? 'X' : 'O';\n    this.setState({\n      history: history.concat([{\n        squares: squares\n      }]),\n      stepNumber: history.length,\n      xIsNext: !this.state.xIsNext,\n      movePosition: movePosition.concat(i),\n      currentHistory: this.state.currentHistory + 1\n    });\n  }\n\n  jumpTo(step) {\n    this.setState({\n      stepNumber: step,\n      xIsNext: step % 2 === 0,\n      currentHistory: step\n    });\n  }\n\n  reverseMove() {\n    this.setState({\n      isDescending: !this.state.isDescending\n    });\n  }\n\n  render() {\n    const history = this.state.history;\n    const current = history[this.state.stepNumber];\n    const currentPosition = this.state.movePosition[this.state.stepNumber - 1];\n    const col = this.state.numCol;\n    const row = this.state.numRow;\n    const isDescending = this.state.isDescending;\n    const winner = calculateWinner(current.squares, currentPosition, col, row, this.state.xIsNext);\n    const moves = history.map((step, move) => {\n      if (isDescending) {\n        move = history.length - move - 1;\n      }\n\n      const position = this.state.movePosition[move - 1];\n      const desc = move ? 'Go to move #' + move + ' [' + position % col + ',' + Math.floor(position / col) + ']' : 'Go to game start';\n      return /*#__PURE__*/_jsxDEV(\"li\", {\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: move === this.state.currentHistory ? 'bold' : '',\n          onClick: () => this.jumpTo(move),\n          children: desc\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 21\n        }, this)\n      }, move, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 17\n      }, this);\n    });\n    let status;\n\n    if (winner) {\n      status = 'Winner: ' + winner;\n    } else {\n      if (this.state.movePosition.length === col * row && this.state.currentHistory === col * row) {\n        status = 'Result: Draw';\n      } else {\n        status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\n      }\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-board\",\n        children: /*#__PURE__*/_jsxDEV(Board, {\n          squares: current.squares,\n          onClick: i => this.handleClick(i),\n          numCol: col,\n          numRow: row\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-info\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\" \", status]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\"Descending\", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            checked: this.state.isDescending,\n            onClick: () => this.reverseMove()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 169,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"ol\", {\n          children: moves\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 13\n    }, this);\n  }\n\n} // ========================================\n\n\nReactDOM.render( /*#__PURE__*/_jsxDEV(Game, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 186,\n  columnNumber: 5\n}, this), document.getElementById('root'));\n\nfunction calculateWinner(squares, currentPosition, col, row, xIsNext) {\n  //create 4 string from squares\n  const winStr = xIsNext ? oStr : xStr;\n  let rowStr = '';\n  let colStr = '';\n  let diagStr = '';\n  let antiDiagStr = '';\n  let currRow = Math.floor(currentPosition / col);\n  let currCol = currentPosition % col;\n\n  for (let i = 0; i < col; i++) {\n    rowStr += squares[currRow * col + i] ? squares[currRow * col + i] : ' ';\n  }\n\n  for (let i = 0; i < row; i++) {\n    colStr += squares[i * row + currCol] ? squares[i * row + currCol] : ' ';\n  } //const countDiag = Math.min(row,col) - Math.abs(currRow-currCol);\n\n\n  let countDiag = 0;\n\n  if (currCol < currRow && currRow < Math.min(row, col)) {\n    countDiag = Math.min(row, col) - Math.abs(currRow - currCol);\n  } else if (currCol > currRow) {} else {}\n\n  if (countDiag >= numToWin) {\n    //diagonal\n    if (currCol >= currRow) {\n      for (let i = 0; i < countDiag; i++) {\n        diagStr += squares[i * col + currCol - currRow + i] ? squares[i * col + currCol - currRow + i] : ' ';\n      }\n    } else {\n      for (let i = 0; i < countDiag; i++) {\n        diagStr += squares[(currCol - currRow + i) * col + i] ? squares[(currCol - currRow + i) * col + i] : ' ';\n      }\n    }\n  } //anti-diagonal\n\n\n  let countAntiDiag = 0;\n\n  if (currRow + currCol < Math.min(row, col) - 1) {\n    countAntiDiag = currRow + currCol + 1;\n  } else if (currRow + currCol > Math.max(row, col) - 1) {\n    countAntiDiag = row + col - 1 - (currRow + currCol);\n  } else {\n    countAntiDiag = Math.min(row, col);\n  }\n\n  if (countAntiDiag >= numToWin) {\n    if (currCol + currRow < col) {\n      for (let i = 0; i < countAntiDiag; i++) {\n        antiDiagStr += squares[i * col + currCol + currRow - i] ? squares[i * col + currCol + currRow - i] : ' ';\n      }\n    } else {\n      for (let i = 0; i < countAntiDiag; i++) {\n        antiDiagStr += squares[(row - countAntiDiag + i) * col + (col - i - 1)] ? squares[(row - countAntiDiag + i) * col + (col - i - 1)] : ' ';\n      }\n    }\n  }\n\n  console.log('DiagStr', diagStr);\n  console.log('countDiagStr', countDiag);\n\n  if (rowStr.includes(winStr) || colStr.includes(winStr) || diagStr.includes(winStr) || antiDiagStr.includes(winStr)) {\n    return winStr;\n  }\n  /*\r\n  const lines = [\r\n      [0, 1, 2],\r\n      [3, 4, 5],\r\n      [6, 7, 8],\r\n      [0, 3, 6],\r\n      [1, 4, 7],\r\n      [2, 5, 8],\r\n      [0, 4, 8],\r\n      [2, 4, 6],\r\n  ];\r\n  for (let i = 0; i < lines.length; i++) {\r\n      const [a, b, c] = lines[i];\r\n      if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n          return squares[a];\r\n      }\r\n  }\r\n     */\n\n\n  return null;\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"Square\");","map":{"version":3,"sources":["D:/HK1_21_22/Web/week2/src/index.js"],"names":["React","ReactDOM","oStr","xStr","numToWin","Square","props","onClick","value","Board","Component","renderSquare","i","squares","render","htmlFull","numRow","htmlRow","tempRow","j","numCol","push","Game","constructor","state","history","Array","fill","stepNumber","xIsNext","movePosition","currentHistory","isDescending","isEnd","handleClick","current","length","slice","currentPosition","col","row","calculateWinner","setState","concat","jumpTo","step","reverseMove","winner","moves","map","move","position","desc","Math","floor","status","document","getElementById","winStr","rowStr","colStr","diagStr","antiDiagStr","currRow","currCol","countDiag","min","abs","countAntiDiag","max","console","log","includes"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n\r\nconst oStr = 'OOOOO';\r\nconst xStr = 'XXXXX';\r\nconst numToWin = 5;\r\nfunction Square(props) {\r\n    return (\r\n        <button className=\"square\" onClick={props.onClick}>\r\n             {props.value}\r\n        </button>\r\n    );\r\n}\r\n\r\nclass Board extends React.Component {\r\n    renderSquare(i) {\r\n        return (\r\n            <Square\r\n                value={this.props.squares[i]}\r\n                onClick={() => this.props.onClick(i)}\r\n\r\n            />\r\n        );\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n        let htmlFull = [];\r\n        for(let i = 0; i<this.props.numRow;i++) {\r\n            let htmlRow = [];\r\n            let tempRow = [];\r\n            for (let j = 0; j < this.props.numCol; j++) {\r\n                tempRow.push( this.renderSquare(i * this.props.numCol + j));\r\n            }\r\n            htmlRow = <div className={\"board-row\"} key={i}>{tempRow}</div>\r\n            htmlFull.push(htmlRow);\r\n        }\r\n        return htmlFull;\r\n        /*(\r\n\r\n\r\n            <div>\r\n\r\n                <div className=\"board-row\">\r\n                    {this.renderSquare(0)}\r\n                    {this.renderSquare(1)}\r\n                    {this.renderSquare(2)}\r\n                </div>\r\n                <div className=\"board-row\">\r\n                    {this.renderSquare(3)}\r\n                    {this.renderSquare(4)}\r\n                    {this.renderSquare(5)}\r\n                </div>\r\n                <div className=\"board-row\">\r\n                    {this.renderSquare(6)}\r\n                    {this.renderSquare(7)}\r\n                    {this.renderSquare(8)}\r\n                </div>\r\n            </div>\r\n        );\r\n\r\n         */\r\n    }\r\n\r\n\r\n}\r\n\r\nclass Game extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            history: [{\r\n                squares: Array(9).fill(null)\r\n            }],\r\n            stepNumber:0,\r\n            xIsNext: true,\r\n            movePosition: [],\r\n            currentHistory:0,\r\n            numCol:7,\r\n            numRow:10,\r\n            isDescending:false,\r\n            isEnd:false\r\n\r\n\r\n        };\r\n    }\r\n    handleClick(i) {\r\n        const history = this.state.history;\r\n        const movePosition = this.state.movePosition;\r\n        const current = history[history.length - 1];\r\n        const squares = current.squares.slice();\r\n        const currentPosition = this.state.movePosition[this.state.stepNumber-1];\r\n        const col = this.state.numCol;\r\n        const row = this.state.numRow;\r\n        if (calculateWinner(current.squares,currentPosition,col,row,this.state.xIsNext) || squares[i]) {\r\n\r\n            return;\r\n        }\r\n        squares[i] = this.state.xIsNext ? 'X' : 'O';\r\n        this.setState({\r\n            history: history.concat([{squares: squares}]),\r\n            stepNumber: history.length,\r\n            xIsNext: !this.state.xIsNext,\r\n            movePosition: movePosition.concat(i),\r\n            currentHistory: this.state.currentHistory+1,\r\n        });\r\n    }\r\n    jumpTo(step) {\r\n        this.setState({\r\n            stepNumber: step,\r\n            xIsNext: (step % 2) === 0,\r\n            currentHistory: step,\r\n        });\r\n    }\r\n    reverseMove() {\r\n        this.setState({\r\n            isDescending: !this.state.isDescending\r\n        })\r\n    }\r\n    render() {\r\n        const history = this.state.history;\r\n        const current = history[this.state.stepNumber];\r\n        const currentPosition = this.state.movePosition[this.state.stepNumber-1];\r\n        const col = this.state.numCol;\r\n        const row = this.state.numRow;\r\n        const isDescending = this.state.isDescending;\r\n        const winner = calculateWinner(current.squares,currentPosition,col,row,this.state.xIsNext);\r\n        const moves = history.map((step, move) => {\r\n            if (isDescending){\r\n                move = history.length - move - 1;\r\n            }\r\n            const position = this.state.movePosition[move-1];\r\n            const desc = move ? 'Go to move #' + move + ' [' + position%col +','+ Math.floor(position/col) +']': 'Go to game start';\r\n            return (        \r\n                <li key={move}>\r\n                    <button className={move===this.state.currentHistory?'bold':''} onClick={() => this.jumpTo(move)}>{desc}</button>\r\n                </li>    \r\n            );   \r\n        });\r\n        let status;\r\n        if (winner) {\r\n            status = 'Winner: ' + winner;\r\n        }\r\n        else {\r\n            if(this.state.movePosition.length === col*row && this.state.currentHistory === col*row){\r\n                status = 'Result: Draw';\r\n            }\r\n            else {\r\n                status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\r\n            }\r\n\r\n        }\r\n        return (\r\n            <div className=\"game\">\r\n                <div className=\"game-board\">\r\n                    <Board\r\n                        squares={current.squares}\r\n                        onClick={i => this.handleClick(i)}\r\n                        numCol = {col}\r\n                        numRow = {row}\r\n                    />\r\n                </div>\r\n                <div className=\"game-info\">\r\n                    <div> {status}</div>\r\n                    <div>Descending\r\n\r\n                            <input type=\"checkbox\" checked={this.state.isDescending} onClick={()=>this.reverseMove()}>\r\n                            </input>\r\n\r\n                    </div>\r\n\r\n                    <ol>{moves}</ol>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n\r\n}\r\n\r\n// ========================================\r\n\r\nReactDOM.render(\r\n    <Game />,\r\n    document.getElementById('root')\r\n);\r\nfunction calculateWinner(squares,currentPosition,col,row, xIsNext) {\r\n    //create 4 string from squares\r\n    const winStr = xIsNext?oStr:xStr;\r\n    let rowStr='';\r\n    let colStr='';\r\n    let diagStr= '';\r\n    let antiDiagStr = '';\r\n    let currRow=Math.floor(currentPosition/col);\r\n    let currCol=currentPosition%col;\r\n    for(let i=0; i<col;i++) {\r\n        rowStr += squares[currRow * col + i]?squares[currRow * col + i]:' ';\r\n    }\r\n    for(let i=0; i<row;i++) {\r\n        colStr += squares[i*row + currCol]?squares[i*row + currCol]:' ';\r\n    }\r\n    //const countDiag = Math.min(row,col) - Math.abs(currRow-currCol);\r\n    let countDiag = 0;\r\n    if (currCol < currRow && currRow<Math.min(row, col)){\r\n        countDiag = Math.min(row,col) - Math.abs(currRow-currCol);\r\n    }\r\n    else if (currCol > currRow){\r\n\r\n    }\r\n    else{\r\n\r\n    }\r\n    if (countDiag>=numToWin){\r\n        //diagonal\r\n        if(currCol >= currRow){\r\n            for(let i = 0; i<countDiag;i++){\r\n                diagStr += squares[i*col+currCol-currRow+i]?squares[i*col+currCol-currRow+i]:' ';\r\n            }\r\n        }\r\n        else{\r\n            for(let i = 0; i<countDiag;i++){\r\n                diagStr += squares[(currCol-currRow+i)*col+i]?squares[(currCol-currRow+i)*col+i]:' ';\r\n            }\r\n        }\r\n    }\r\n    //anti-diagonal\r\n    let countAntiDiag = 0;\r\n    if (currRow+currCol < Math.min(row,col) - 1){\r\n        countAntiDiag = currRow + currCol + 1;\r\n    }\r\n    else if (currRow+currCol > Math.max(row,col) - 1){\r\n        countAntiDiag = row + col - 1 - (currRow + currCol)\r\n    }\r\n    else {\r\n        countAntiDiag = Math.min(row,col);\r\n    }\r\n\r\n    if (countAntiDiag>=numToWin){\r\n\r\n        if(currCol + currRow < col){\r\n            for(let i = 0; i< countAntiDiag ;i++){\r\n                antiDiagStr += squares[i*col+currCol+currRow-i]?squares[i*col+currCol+currRow-i]:' ';\r\n            }\r\n        }\r\n        else{\r\n            for(let i = 0; i<countAntiDiag;i++){\r\n                antiDiagStr += squares[(row - countAntiDiag + i)*col + (col - i- 1)]?squares[(row - countAntiDiag + i)*col + (col - i- 1)]:' ';\r\n            }\r\n        }\r\n    }\r\n\r\n    console.log('DiagStr',diagStr);\r\n    console.log('countDiagStr',countDiag);\r\n    if(rowStr.includes(winStr) || colStr.includes(winStr) || diagStr.includes(winStr) || antiDiagStr.includes(winStr))\r\n    {\r\n        return winStr;\r\n    }\r\n    /*\r\n    const lines = [\r\n        [0, 1, 2],\r\n        [3, 4, 5],\r\n        [6, 7, 8],\r\n        [0, 3, 6],\r\n        [1, 4, 7],\r\n        [2, 5, 8],\r\n        [0, 4, 8],\r\n        [2, 4, 6],\r\n    ];\r\n    for (let i = 0; i < lines.length; i++) {\r\n        const [a, b, c] = lines[i];\r\n        if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n            return squares[a];\r\n        }\r\n    }\r\n\r\n     */\r\n    return null;\r\n}"]},"metadata":{},"sourceType":"module"}